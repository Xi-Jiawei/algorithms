// CDiplusConsoleApplicationDemo.cpp: 定义控制台应用程序的入口点。
//

#include <stdlib.h>
#include <intrin.h>

#include "classes.h"
#include "strings.h"

#pragma region static：局部静态变量，模块化
int static_test() {
	static int a = 0;
	a++;
	return a;
}
#pragma endregion

#pragma region 引用：作为参数，效果如同指针
void reference_test(int &a,int &b) {
	int temp=a;
	a = b;
	b = temp;
}
#pragma endregion

#pragma region 关键字inline（内联函数）：质数判断
inline char* inline_test(int n)
{
	int i = sqrt(n),flag=0;
	while (i >= 2)
	{
		if (n%i == 0) {
			flag = 1;
			break;
		}
		else
		{
			i--;
		}
	}
	return flag ? "合数" : "质数";
}
#pragma endregion

int main()
{
    #pragma region 构造与析构
	/*//X *x = new X(12,14);//new创建的对象存放在堆区，需手动释放，无法自动析构
	//delete x;//c++中使用delete object释放对象，c中可使用free(object)
	X x=X(12,14);
	X x1 = X(x);//拷贝构造函数，系统自带，也可自定义
	X x2 = x;//实际上也是调用了拷贝构造函数
	X xs[3];
	xs[0] = x;
	xs[1] = x1;
	xs[2] = x2;

	//Y *y = new Y();//new创建的对象存放在堆区，需手动释放，无法自动析构
	//delete y;//c++中使用delete object释放对象，c中可使用free(object)
	Y y;
	y.x = xs;
	*y.p = 2;
	cout << y.x[2].key << " " << y.x[2].value << endl;
	cout << y.value << endl;*/
    #pragma endregion

    #pragma region 继承
	/*Circle *circle = new Circle(2.0);
	circle->calcArea();
	circle->print();
	Rectangle *rectangle= new Rectangle(3.0,4.0);
	rectangle->calcArea();
	rectangle->print();
	Triangle *triangle = new Triangle(3.0, 4.0, 5.0);
	triangle->calcArea();
	//triangle->area;私有方式继承，继承类中成员都会变成私有，所以变量area不可访问
	//triangle->print();*/
    #pragma endregion

    #pragma region 多态
	/*c++中多态以虚函数实现，无论父类中的虚函数与子类虚函数实现是否一样，子类对象调用此函数只会调用子类虚函数，而忽略父类虚函数
	*/
	/*People *people;
	people = new Student("Bob");
	people->setLabel();
	cout << people->name << " " << people->getLabel() << endl;
	people = new Teacher("Einstein");
	people->setLabel();
	cout << people->name << " " << people->getLabel() << endl;*/
    #pragma endregion

    #pragma region 设计模式
	/*单例模式*/
	/*Tom *tom = Tom::instance();
	Tom *tom1 = Tom::instance();//可以看出，虽然多次获取实例对象，但只构造/析构了一次*/
	/*Tom *tom;
	Tom *tom1 = tom->instance();//静态成员可直接用作用域运算符“::”通过类名访问，也可用类对象访问
	Tom *tom2 = tom->instance();*/

	/*工厂模式*/
	/*People *people;
	people = new Student("Bob");
	people->setLabel();
	cout << people->name << " " << people->getLabel() << endl;
	people = new Teacher("Einstein");
	people->setLabel();
	cout << people->name << " " << people->getLabel() << endl;*/

	/*原型模式*/
	/*People *people;
	people = new Student("Bob");
	people->setLabel();
	People *people2 = people->clone();//复制people
	people2->name = "Tom";
	People *people3 = new Student("Nancy");
	cout << people->name << " " << people->getLabel() << endl;
	cout << people2->name << " " << people2->getLabel() << endl;
	cout << people3->name << " " << people3->getLabel() << endl;*/

	/*装饰者模式*/
	/*People *people = new Student("Bob");
	people->setLabel();
	//定义UnderGraduate类，用于装饰Student对象
	people = new UnderGraduate(people);
	people->setLabel();
	cout << people->name << " " << people->getLabel() << endl;*/

	/*观察者模式*/
	/*Student *student1 = new Student("Bob");
	Student *student2 = new Student("Jerry");
	Teacher *teacher = new Teacher("Einstein");
	teacher->registerListenner(student1);
	teacher->registerListenner(student2);
	teacher->notify("hand in your homework tomorrow, pelease!");*/
    #pragma endregion

    #pragma region 字符串拼接
	/*char str[10] = "hello";
	strcat(str, " world");*/
	/*char *str = "hello";
	str = string_concat(2, str, " world");
	str = string_concat({ str, " world" });
	str = string_format("i am %d years old", 26);*/
    #pragma endregion

    #pragma region 常量
	/*const char *str = "utf8";
	str = "ansi";
	cout << str << endl;

	//除char*外，const修饰的变量都是只读变量，不可直接修改。
	//虽然直接修改常量会得到一个编译错误，但是使用间接指针修改内存，只要符合语法则不会得到任何错误和警告
	const int a = 17;
	//a = 23;//报错“表达式必须是可修改的左值”
	int *p = (int*)&a;//指针可强制转换类型const int*为int*
	*p = 23;
	cout << a << endl;*/
    #pragma endregion

    #pragma region 静态局部变量
	/*一般程序由new产生的动态数据放在堆区；
	函数内部的自动变量放在栈区，自动变量一般会随着函数的退出而释放空间；
	静态数据(即使是函数内部的静态局部变量)都存放在全局数据区，因此它们并不会随着函数的退出而释放空间*/
	/*定义在函数内部的静态变量称为静态局部变量，静态局部变量作用域只在此函数内
	*/
	/*cout << static_test() << endl;
	cout << static_test() << endl;*/
    #pragma endregion

    #pragma region 指针
	/*char *str = "hello world";
	char *ptr = str + 6;
	cout << ptr << endl;
	int a[] = {3,2,5,13,7,9,17,12};
	int *p = a, *p0 = &a[0], *p3 = &a[3];
	cout << (p0 - p) << endl; //p0 - p = 0
	cout << (p3 - p0) << endl; //p3 - p0 = 3
	int size = end(a) - begin(a); //求数组长度*/
    #pragma endregion

    #pragma region 引用
	/*char *str = "hello world";
	char *&ptr = str;*/
	/*int a = 3, b = 4;
	reference_test(a, b);//引用作为参数修改其值时，相当于引用的变量的值也作了修改，所以使用引用或指针可返回多个值，有效解决函数只返回一个值的问题*/
    #pragma endregion

    #pragma region 2进制反码及补码
	/*有符号整数在内存中以补码的形式存储。
	正整数的原码、补码和反码都相同；负整数的反码与原码符号位相同，数值位取反，负数补码是在反码的基础上加1。
	取反操作符对有符号整数进行操作的结果为：~x=-(x+1)
	取反操作符对有符号整数0进行操作的结果为-1，-1在内存中存储形式是全为1的二进制位串；取反操作符对有符号整数-1进行操作的结果为0*/
	/*uint8_t c = 0b101;
	int8_t s = 2;
	uint32_t bitfield = 0;
	int32_t flag = 2, value = 1;
	c = ~c; //8位无符号整数s=5，在内存中存储形式为0000 0101，取反操作符对其按位取反为1111 1010，十进制表示为0d250，所以等号右值250
	s = ~s; //8位有符号整数s=2，在内存中存储形式为0000 0010，取反操作符对其按位取反为1111 1101，即等号右值在内存中存储形式为1111 1101；那么求哪个数在内存中存储形式为1111 1101？先观察符号位为1，左值为负数，那么对1111 1101进行补码逆运算，数值减1后为1111 1100，即为左值的反码，再进行反码逆运算得1000 0011，所以左值为-3
	s = ~s; //过程同正数取反过程，s==~(~s)
	bitfield = 0; flag = 2; value = 1;
	bitfield = 2; flag = 4 | 16; value = 1;
	bitfield = 22; flag = 8; value = 1;
	(bitfield) = ((bitfield) & (~(flag))) | ((~((value)-1)) & (flag));*/
    #pragma endregion

    #pragma region char/uint8_t/uint16_t/uint32_t/uint64_t/int8_t/int16_t/int32_t/int64_t
    /*uint8_t取值范围0~255，int8_t取值范围-128~127*/
    /*uint8_t c = -61;
	c = -128; //-128在内存中存储形式为1 1000 0000，注意最高位是符号位，相当于无符号整数128，所以左值c是128
	int8_t n = 128; //128在内存中存储形式为0 1000 0000，有符号整数-128在内存中存储形式也是1000 0000（注意，有符号整数-0，即有符号整数0在内存中存储形式是0000 0000）
	n = 255; //255在内存中存储形式为1111 1111，有符号整数-1在内存中存储形式也是1111 1111，所以左值n是-1
	n = -128;*/
    #pragma endregion

    #pragma region char*
	/*char *str = "hello world";//指针变量str存储在栈区，但是被创建的字符串"hello world"存储在常量区
	char *str1= "hello world";//调试发现str和str1指向的地址相同，这就证明字符串"hello world"被创建后就存储在常量区
	cout << (str == str1) << endl;

	cout << str << endl;
	cout << *str << endl;//指针指向的地址存放的是字符串的首个字符
	cout << strlen(str) << endl;
	cout << sizeof(*str) << endl;//sizeof(*str)==sizeof(char)
	cout << sizeof(str) << endl;//指针变量大小根据编译器而定，64位编译器上指针变量大小是64位（即8字节），32位指针变量大小是32位（即4字节）

	//char *dst = "hi";//不能作为strcpy、strcat等函数的输出。因为此时指针指向常量区（在java中称为字符串常量池），向常量区进行写入操作会引发“写入异常错误”
	//char dst[4];
	//char *dst=new char[20];
	char *dst = (char*)malloc(sizeof(char) * 20);
	strcpy(dst, "hello");
	strcat(dst, " world");*/

	/*int、string互转*/
	/*char* num_str = "1214";
	int n;
	//string转int
	sscanf(num_str, "%d", &n);
	//int转string
	n = 3276;
	char *str = new char[20];
	sprintf(str, "%d", n);*/

    /*字符串拼接*/
    /*string str, str1 = "hello ", str2 = "world";
	str = str1 + str2;
	cout << str << endl;*/
    #pragma endregion

    #pragma region 常量指针const char *和指向字符的指针常量char * const
    /*常量指针const char *，指向的地址的内容不一定是常量，，而且常量指针的指向地址是可以改变的，不能直接修改常量指针的值，但是可以通过修改其指向的变量的值来改变常量指针的值。
	就比如下面的例子，str本身是常量，当ptr指向str时，str本身不能修改其内容，更不能通过ptr修改其内容；
	但str2不同于str，str2是字符数组，本身不是常量，是可以修改其内容的，所以当常量指针指向变量时，可以通过修改常量指针其指向的变量的值来改变常量指针的值
	再比如，一开始ptr指向str，然后可以改变其指向地址指向str1*/
    /*char *str = "hello", *str1 = "world", str2[] = "hello";
	const char *ptr = str;
	cout << ptr << endl;
	//ptr[0] = 'c';//报错“表达式必须是可修改的左值”，说明常量指针不可修改其指向的常量的值
	//str[0] = 'c';//报错，说明常量指针不可修改其指向的常量的值
	ptr = str1;//正常，说明常量指针可改变其指向地址
	cout << ptr << endl;
	ptr = str2;
	str2[0] = 'c';//正常，说明常量指针可修改其指向的变量的值
	cout << ptr << endl;*/

	/*char const *同const char **/
	/*char *str = "hello", *str1 = "world", str2[] = "hello";
	char const *ptr = str;
	cout << ptr << endl;
	//ptr[0] = 'c';//报错“表达式必须是可修改的左值”，说明常量指针不可修改其指向的常量的值
	//str[0] = 'c';//报错，说明常量指针不可修改其指向的常量的值
	ptr = str1;//正常，说明常量指针可改变其指向地址
	cout << ptr << endl;
	ptr = str2;
	str2[0] = 'c';//正常，说明常量指针可修改其指向的变量的值
	cout << ptr << endl;*/

	/*指向字符的指针常量char * const，指针是常量，必须在声明时就初始化。
	指向字符的指针常量的指向地址是不能修改的，但是可以修改指向的地址的内容。*/
    /*char str[] = "hello", *str1 = "world";
	char * const ptr = str;
	cout << ptr << endl;
	//ptr = str1;//报错“表达式必须是可修改的左值”，说明char * const指针本身是常量，不可修改
	str[0] = 'c';
	cout << ptr << endl;
	char * const ptr1 = str1;
	cout << ptr1 << endl;
	//str1[0] = 'c';//报错，因为str1本身是常量，其内容是不能被修改的
	cout << ptr1 << endl;*/
    #pragma endregion

    #pragma region 数组
    //一维数组
    /*int a[10]{ 1,2,3 }, *p, b[]{ 4,5,6 }, n = 10;
	for (int i = 0; i < 10; i++)
		cout << *(a + i) << endl;
	//cout << *++a << endl; //此句报错，不可以对数组名称进行修改等操作，因为a、b是数组名称，不是变量，是不可修改的
	p = a + 1;
	cout << *++p << endl;
	cout << *p++ << endl;
	//b = new int[n] {6}; //此句报错，原因同上，数组名称不是变量，是不可修改的
	p = new int[n] {7}; //用花括号进行初始化的方式是看花括号里面有几个元素，就初始化数组前几个元素。比如这里，只是将p[0]置7，其他元素默认为0，而并不是将所有元素都置7
	for (int i = 0; i < n; i++)
		cout << *(p + i) << endl;*/

	//静态二维数组
	/*int a[3][4]{ 0 };
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 4; j++)
			a[i][j] = 10 * i + j;
	cout << "a[0][0]: " << **a << endl;
	cout << "a[1][0]: " << **(a + 1) << endl;//*(a + 1)表示二维数组中的第2个一维数组的首地址，即a[1]
	cout << "a[1][2]: " << *(*(a + 1) + 2) << endl;*/

	//动态二维数组
	/*int n = 3, m = 4;
	int **a = new int*[n];
	for (int i = 0; i < n; i++) {
		*(a + i) = new int[m] {0};
		for (int j = 0; j < m; j++)
			a[i][j] = 10 * i + j;
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < 4; j++)
			cout << a[i][j] << " ";
		cout << endl;
	}*/
    #pragma endregion

    #pragma region 关键字inline（内联函数）
	//c语言中，如果一些简单函数被频繁调用，不断地有函数入栈，即函数栈，会造成栈空间或栈内存的大量消耗（这也是递归算法效率低的原因）
	//为了解决这个问题，特别的引入了inline修饰符，表示为内联函数
	//使用inline修饰带来的好处我们表面看不出来，其实在内部的工作就是在每个for循环的内部任何调用inline_test(i)的地方都换成了相应的代码块。
	//这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。
	/*for (int i = 2; i < 100; i++)
		cout << i << ": " << inline_test(i) << endl;*/
    #pragma endregion

    #pragma region 赋值运算顺序
	/*if (NULL)
		cout << "mark" << endl;
	if (0)
		cout << "mark" << endl;
	int a, b;
	b = a = 2;//相当于b= (a = 2);，括号内运行结束后，返回的是a赋值后的值
	b = a = a++;//相当于b= (a = a++);，括号内运行结束后，返回的是a赋值后的值，即返回2，所以b也等于2，然后a进行自加1变成3
	cout << "a: " << a << " b: " << b << endl;*/
    #pragma endregion

    #pragma region scanf/gets
    /*从vs 2015开始，用gets_s函数替代旧的gets函数，因为gets()不会对目标缓存进行边界检测，易造成越界错误。
	在c11标准中，新增gets_s函数（可选），作为gets函数的扩展，是一个可选项，不是必选项。*/
	/*函数scanf()和gets()一样，都不能处理换行符'\n'，也就是出现换行符会停止读取，但是io指针仍指向换行符，换行符仍保留在stdin输入缓冲区；
	而gets_s()则遇到换行符时会停止读取，并处理换行符，io指针指向换行符之后的地址，stdin输入缓冲区中已经没有换行符*/
    /*运行以下代码，试着在控制台中输入如下内容会有所发现：
	23
	hello
	world
	i'm ok.
	f
	*/
	/*int n;
	char c, str[20], str2[20];
	scanf("%d", &n);
	scanf("%s", &str); //读取字符串或数字时，即格式为%s、%d或%f时，会先自动处理换行符
	scanf("%c", &c); //读取单个字符时，不会处理换行符而直接读取
	scanf("%s", &str); //如果输入中有空格，函数scanf()遇到空格会停止读取；而gets_s()和gets_s()则可以读取空格，直至遇到换行符停止读取
	gets_s(str2); //上一次使用scanf()后，会留有换行符，如果换行符没有处理，那直接进行下一次读取会因为遇到换行符而读取空的内容
	gets_s(str2);
	scanf("%c", &c);
	*/

	/*根据上述测试，使用了scanf()后，要特别注意先处理完换行符再进行下一次字符读取。
	可以这样连续使用scanf()
	scanf("%d", &n);
	scanf("%s", &str);
	但是不能如此连续使用scanf()：
	scanf("%d", &n);
	scanf("%c", &c);
	（注意，不能在使用了一次scanf()后再使用scanf()读取一个字符）
	*/
	/*char c, str[20];
	scanf("%s", &str);
	getchar(); //读取换行符，也就处理了换行符
	scanf("%c", &c);*/
    #pragma endregion

    #pragma region cin/getline
	/*cin是c++中的标准输入流对象，实际上cin输入流在内部实现时会同步stdin输入缓冲区。
	也就是说，输入流会时刻与输入缓冲保持同步，这是一个很耗时的操作，
	所以就导致了在大量输入数据的时候，cin会比scanf慢很多，这个慢，是数量级上的差异。*/
	/*int n;
	vector<int> a;
	do {
		cin >> n;
		a.push_back(n);
	} while (cin.get() != '\n');
	for (int i = 0; i < a.size(); i++)
		cout << a[i] << endl;*/

	/*string str;
	char cstr[20];
	vector<string> a;
	for (int i = 0; i < 3; i++) {
		//getline(cin, str);
		//a.push_back(str);
		cin.getline(cstr, 23); //_Count = _Count < bufferSize ? _Count : bufferSize;
		a.push_back(cstr);
	}
	for (int i = 0; i < a.size(); i++)
		cout << a[i] << endl;*/
    #pragma endregion

    #pragma region sizeof
	/*int* arrA = new int[3];
	cout << sizeof(arrA) << endl;//8
	cout << sizeof(arrA[0]) << endl;//4
	cout << sizeof(*arrA) << endl;//4
	int arrB[] = { 1,2,3 };
	cout << sizeof(arrB) << endl;//12
	cout << sizeof(arrB[0]) << endl;//4
	int size = sizeof(arrB) / sizeof(arrB[0]);//求数组长度

	void *ptr;
	cout << sizeof(ptr) << endl;//x64: 8；x86: 4*/
    #pragma endregion

    #pragma region 整型转字符串（int范围）
    /*int n, temp, d, i = 0, size = 1;
	cin >> n;
	temp = n;
	while (temp /= 10)size++;
	string n_str=string(size,0);
	do {
		d = pow(10, (size - i - 1));
		n_str[i++] = n / d + '0';
	} while (n %= d);
	n_str[i] = 0;*/
	/*int n, size = 1;
	cin >> n;
	char *n_str = new char[20];
	sprintf(n_str, "%d", n);
	size = strlen(n_str);*/
    #pragma endregion

    #pragma region system("pause");
	/*cout << "before pause." << endl;
	system("pause");
	//cin.get();
	//getchar();
	cout << "cancel pause." << endl;*/
    #pragma endregion

    #pragma region malloc
    /*#define BUFFER_SIZE 128
    #define BUFFER_PADDING_SIZE 64

    const char *filename, *outfilename;
    FILE *freader, *fwriter;
	uint8_t *buf = (uint8_t*)_aligned_malloc(BUFFER_SIZE + BUFFER_PADDING_SIZE, 64);//申请对齐内存。参数_Alignment必须是2的整数次幂
	memset(buf + BUFFER_SIZE, 0, BUFFER_PADDING_SIZE);
	int bufSize;

	filename = "D:\\Users\\veev\\source\\repos\\CPlusPlusProjects\\ConsoleApplications\\medias\\ffmpegs\\bigbuckbunny_480x272.h264";
	freader = fopen(filename, "rb");
	if (!freader) {
		fprintf(stderr, "Could not open %s\n", filename);
		exit(1);
	}

    Packet *pkts= (Packet*)malloc(sizeof(Packet));
	int pkt_num = 0;
	while (pkt_num<6) {
		bufSize = fread(buf, 1, BUFFER_SIZE, freader);
		uint8_t *data = (uint8_t*)malloc(BUFFER_SIZE);
		memcpy(data, buf, BUFFER_SIZE);

		if (!pkt_num) {
			pkts = new Packet;
			memset(pkts, 0, sizeof(*pkts));
		}
		else {
			void *tmp = realloc(pkts, (pkt_num + 1) * sizeof(Packet)); // 动态申请内存，因为是数组。
			pkts = (Packet*)tmp;
			memset(pkts + pkt_num, 0, sizeof(*pkts));
		}

		pkts[pkt_num].buf = data;
		pkts[pkt_num].size = BUFFER_SIZE;
		pkts[pkt_num].type = 1;
		++pkt_num;
	}

	outfilename = "D:\\Users\\veev\\source\\repos\\CPlusPlusProjects\\ConsoleApplications\\medias\\ffmpegs\\bigbuckbunny_480x272_out.h264";
	fwriter = fopen(outfilename, "w");
	for (int i = 0; i < pkt_num;i++) {
		int header = 0x000001;
		fwrite(&header, 1, 4, fwriter);
		fwrite(&pkts[i].type, 1, 4, fwriter);
		fwrite(pkts[i].buf, 1, pkts[i].size, fwriter);
	}

	fclose(freader);
	fclose(fwriter);*/
    #pragma endregion

    #pragma region 文本字符串以2进制显示
    /*uint8_t in[15]{ 0x05, 0x03, 0xc0, 0x2f, 0xeb, 0xff, 0x96, 0xff, 0x84, 0xff, 0x2f, 0xfe, 0x33, 0xff, 0x2d }, *out;
	int size = sizeof(in), i;
	out = new uint8_t[size * 8];*/
    /*#define BUFFER_SIZE 4096
    int bufSize = BUFFER_SIZE, start, size, i;
	FILE *freader, *fwriter;
	//const char *filename = "D:\\Users\\veev\\Graduate\\svacfiles\\remove_head.dav";
	//const char *filename = "D:\\Users\\veev\\source\\repos\\CPlusPlusProjects\\ConsoleApplications\\medias\\ffmpegs\\bigbuckbunny_480x272.hevc";
	const char *filename = "D:\\Users\\veev\\source\\repos\\CPlusPlusProjects\\ConsoleApplications\\medias\\ffmpegs\\src01_480x272_0.025.vp9";
	uint8_t *buf = (uint8_t*)malloc(BUFFER_SIZE);
	memset(buf, 0, BUFFER_SIZE);
	freader = fopen(filename, "rb");
	if (!freader) {
		fprintf(stderr, "Could not open %s\n", filename);
		exit(1);
	}
	start = 0x149, size = 32;
	while (start > bufSize) {
		bufSize = fread(buf, 1, BUFFER_SIZE, freader);
		start -= bufSize;
	}
	bufSize = fread(buf, 1, BUFFER_SIZE, freader);
	uint8_t *in = new uint8_t[size],*out = new uint8_t[size * 8];
	memcpy(in, buf + start, size);
	for (i = 0; i < size; i++) {
		for (int j = 0; j < 8; j++) {
			//out[i * 8 + j] = in[i] & (1 << (7 - j)) ? '1' : '0';
			out[i * 8 + 7 - j] = in[i] & 1 ? '1' : '0';
			in[i] >>= 1;
		}
	}
	i = 0;
	while (i < size*8) {
		cout << out[i];
		++i;
		if (i % 8 == 0)cout << " ";
		if (i % 64 == 0)cout << endl;
	}*/
    #pragma endregion

    #pragma region 整数运算
    /*uint32_t k, m, n, p, q, r;
	scanf("%d%d", &n, &m);
	k = n / m; //向下取整
	k = (n - 1) / m + 1; //向上取整
	printf("%d / %d = %d", n, m, k);*/
    #pragma endregion

    #pragma region 逆向扫描指令
    /*uint32_t b;
	uint8_t c;
	unsigned long idx;
	b = 0x8000;
	b = 0x81;
	c = 0x20;
	c = 0x21;
	_BitScanReverse(&idx, b); //从左向右扫描，即从高位向低位扫描，找到第1个出现'1'的位置。因为0x8000=0b00000000 00000000 10000000 00000000，所以idx=15，注意idx指高位顺序，即从右到左的索引
	_BitScanReverse(&idx, c); //因为0x21=0b00100001，所以idx=5*/
    #pragma endregion

    #pragma region 文件分割
    /*uint8_t *buffer;
    int buffer_size, filename_length, i;
	FILE *freader, *fwriter;*/
	/*const char *filename = "D:\\Users\\veev\\Graduate\\svacfiles\\remove_head.dav";
	const char *outfilename;
	char *outfilename_format = "D:\\Users\\veev\\Graduate\\svacfiles\\remove_head_split_%d.dav";*/
	/*const char *filename = "D:\\Users\\veev\\Graduate\\svacfiles\\201911271800.svac";
	const char *outfilename;
	char *outfilename_format = "D:\\Users\\veev\\Graduate\\svacfiles\\201911271800_split_%d.svac";
    #define BUFFER_SIZE 4096
    #define AV_INPUT_BUFFER_PADDING_SIZE 64

	buffer = (uint8_t*)_aligned_malloc(BUFFER_SIZE + AV_INPUT_BUFFER_PADDING_SIZE, 64); // 参数_Alignment必须是2的整数次幂
	memset(buffer + BUFFER_SIZE, 0, AV_INPUT_BUFFER_PADDING_SIZE);

	freader = fopen(filename, "rb");
	if (!freader) {
		fprintf(stderr, "Could not open %s\n", filename);
		exit(1);
	}

	int buffer_num = 0;
	outfilename = string_format(outfilename_format, buffer_num);
	fwriter = fopen(outfilename, "wb");
	while (!feof(freader)) {
		buffer_size = fread(buffer, 1, BUFFER_SIZE, freader);
		fwrite(buffer, 1, buffer_size, fwriter); 
		++buffer_num;

		if (buffer_num % 10000 == 0) {
			outfilename = string_format(outfilename_format, buffer_num / 10000);
			fwriter = fopen(outfilename, "wb");
		}
	}*/
    #pragma endregion

    #pragma region 数组元素批量变换
	/*uint32_t i, size;
	uint8_t arr[255] = {
		7,  20,  33,  46,  59,  72,  85,  98, 111, 124, 137, 150, 163, 176,
		189, 202, 215, 228, 241, 254,   1,   2,   3,   4,   5,   6,   8,   9,
		10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  21,  22,  23,  24,
		25,  26,  27,  28,  29,  30,  31,  32,  34,  35,  36,  37,  38,  39,
		40,  41,  42,  43,  44,  45,  47,  48,  49,  50,  51,  52,  53,  54,
		55,  56,  57,  58,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
		70,  71,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
		86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  99, 100,
		101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115,
		116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130,
		131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145,
		146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
		161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
		177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191,
		192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206,
		207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221,
		222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236,
		237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
		252, 253, 253,
	};
	size = sizeof(arr);
	printf("uint8_t arr[255] = {\n");
	for (i = 0; i < size; i++) {
		arr[i] -= 1;
		printf("%d, ", arr[i]);
		if ((i + 1) % 14 == 0)printf("\n");
	}
	printf("\n};");*/
    #pragma endregion

    #pragma region 数组元素比对
	/*uint32_t i, size;
	uint8_t arrA[254] = {
		6, 19, 32, 45, 58, 71, 84, 97, 110, 123, 136, 149, 162, 175,
		188, 201, 214, 227, 240, 253, 0, 1, 2, 3, 4, 5, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23,
		24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38,
		39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53,
		54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
		69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
		85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99,
		100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114,
		115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129,
		130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144,
		145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
		160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
		176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190,
		191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205,
		206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220,
		221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235,
		236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
		251, 252,
	},
	arrB[254] = {
		6 , 19 , 32 , 45 , 58 , 71 , 84 , 97 , 110 , 123 , 136 , 149 , 162 , 175 , 188 ,
		201, 214 , 227 , 240 , 253 , 0 , 1 , 2 , 3 , 4 , 5 , 7 , 8 , 9 , 10 ,
		11, 12 , 13 , 14 , 15 , 16 , 17 , 18 , 20 , 21 , 22 , 23 , 24 , 25 , 26 ,
		27, 28 , 29 , 30 , 31 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 ,
		43, 44 , 46 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 59 ,
		60, 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 72 , 73 , 74 , 75 ,76
		, 77 , 78 , 79 , 80 , 81 , 82 , 83 , 85 , 86 , 87 , 88 , 89 , 90 , 91 ,
		92 , 93 , 94 , 95 , 96 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 ,
		108 , 109 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 124 ,
		125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 137 , 138 , 139 , 140 ,
		141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 150 , 151 , 152 , 153 , 154 , 155 , 156 ,
		157 , 158 , 159 , 160 , 161 , 163 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 171 , 172 ,
		173 , 174 , 176 , 177 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 189 ,
		190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 202 , 203 , 204 , 205 ,
		206 , 207 , 208 , 209 , 210 , 211 , 212 , 213 , 215 , 216 , 217 , 218 , 219 , 220 , 221 ,
		222 , 223 , 224 , 225 , 226 , 228 , 229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 ,
		238 , 239 , 241 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252
	};
	size = sizeof(arrA) < sizeof(arrB) ? sizeof(arrA) : sizeof(arrB);
	printf("different elements between arrA and arrB: \n");
	for (i = 0; i < size; i++) {
		if (arrA[i] != arrB[i])
			printf("arrA[%d]: %d; arrB[%d]； %d\n", i, arrA[i], i, arrB[i]);
	}*/
	/*uint32_t i, j;
	uint8_t arrA[256][8] = {
		{ 3,  86, 128,   6,  86,  23,  88,  29 },
		{ 6,  86, 128,  11,  87,  42,  91,  52 },
		{ 9,  86, 129,  17,  88,  61,  94,  76 },
		{ 12,  86, 129,  22,  88,  77,  97,  93 },
		{ 15,  87, 129,  28,  89,  93, 100, 110 },
		{ 17,  87, 129,  33,  90, 105, 103, 123 },
		{ 20,  88, 130,  38,  91, 118, 106, 136 },
		{ 23,  88, 130,  43,  91, 128, 108, 146 },
		{ 26,  89, 131,  48,  92, 139, 111, 156 },
		{ 28,  89, 131,  53,  93, 147, 114, 163 },
		{ 31,  90, 131,  58,  94, 156, 117, 171 },
		{ 34,  90, 131,  62,  94, 163, 119, 177 },
		{ 37,  90, 132,  66,  95, 171, 122, 184 },
		{ 39,  90, 132,  70,  96, 177, 124, 189 },
		{ 42,  91, 132,  75,  97, 183, 127, 194 },
		{ 44,  91, 132,  79,  97, 188, 129, 198 },
		{ 47,  92, 133,  83,  98, 193, 132, 202 },
		{ 49,  92, 133,  86,  99, 197, 134, 205 },
		{ 52,  93, 133,  90, 100, 201, 137, 208 },
		{ 54,  93, 133,  94, 100, 204, 139, 211 },
		{ 57,  94, 134,  98, 101, 208, 142, 214 },
		{ 59,  94, 134, 101, 102, 211, 144, 216 },
		{ 62,  94, 135, 105, 103, 214, 146, 218 },
		{ 64,  94, 135, 108, 103, 216, 148, 220 },
		{ 66,  95, 135, 111, 104, 219, 151, 222 },
		{ 68,  95, 135, 114, 105, 221, 153, 223 },
		{ 71,  96, 136, 117, 106, 224, 155, 225 },
		{ 73,  96, 136, 120, 106, 225, 157, 226 },
		{ 76,  97, 136, 123, 107, 227, 159, 228 },
		{ 78,  97, 136, 126, 108, 229, 160, 229 },
		{ 80,  98, 137, 129, 109, 231, 162, 231 },
		{ 82,  98, 137, 131, 109, 232, 164, 232 },
		{ 84,  98, 138, 134, 110, 234, 166, 233 },
		{ 86,  98, 138, 137, 111, 235, 168, 234 },
		{ 89,  99, 138, 140, 112, 236, 170, 235 },
		{ 91,  99, 138, 142, 112, 237, 171, 235 },
		{ 93, 100, 139, 145, 113, 238, 173, 236 },
		{ 95, 100, 139, 147, 114, 239, 174, 237 },
		{ 97, 101, 140, 149, 115, 240, 176, 238 },
		{ 99, 101, 140, 151, 115, 241, 177, 238 },
		{ 101, 102, 140, 154, 116, 242, 179, 239 },
		{ 103, 102, 140, 156, 117, 242, 180, 239 },
		{ 105, 103, 141, 158, 118, 243, 182, 240 },
		{ 107, 103, 141, 160, 118, 243, 183, 240 },
		{ 109, 104, 141, 162, 119, 244, 185, 241 },
		{ 111, 104, 141, 164, 119, 244, 186, 241 },
		{ 113, 104, 142, 166, 120, 245, 187, 242 },
		{ 114, 104, 142, 168, 121, 245, 188, 242 },
		{ 116, 105, 143, 170, 122, 246, 190, 243 },
		{ 118, 105, 143, 171, 122, 246, 191, 243 },
		{ 120, 106, 143, 173, 123, 247, 192, 244 },
		{ 121, 106, 143, 175, 124, 247, 193, 244 },
		{ 123, 107, 144, 177, 125, 248, 195, 244 },
		{ 125, 107, 144, 178, 125, 248, 196, 244 },
		{ 127, 108, 145, 180, 126, 249, 197, 245 },
		{ 128, 108, 145, 181, 127, 249, 198, 245 },
		{ 130, 109, 145, 183, 128, 249, 199, 245 },
		{ 132, 109, 145, 184, 128, 249, 200, 245 },
		{ 134, 110, 146, 186, 129, 250, 201, 246 },
		{ 135, 110, 146, 187, 130, 250, 202, 246 },
		{ 137, 111, 147, 189, 131, 251, 203, 246 },
		{ 138, 111, 147, 190, 131, 251, 204, 246 },
		{ 140, 112, 147, 192, 132, 251, 205, 247 },
		{ 141, 112, 147, 193, 132, 251, 206, 247 },
		{ 143, 113, 148, 194, 133, 251, 207, 247 },
		{ 144, 113, 148, 195, 134, 251, 207, 247 },
		{ 146, 114, 149, 197, 135, 252, 208, 248 },
		{ 147, 114, 149, 198, 135, 252, 209, 248 },
		{ 149, 115, 149, 199, 136, 252, 210, 248 },
		{ 150, 115, 149, 200, 137, 252, 210, 248 },
		{ 152, 115, 150, 201, 138, 252, 211, 248 },
		{ 153, 115, 150, 202, 138, 252, 212, 248 },
		{ 155, 116, 151, 204, 139, 253, 213, 249 },
		{ 156, 116, 151, 205, 139, 253, 213, 249 },
		{ 158, 117, 151, 206, 140, 253, 214, 249 },
		{ 159, 117, 151, 207, 141, 253, 215, 249 },
		{ 161, 118, 152, 208, 142, 253, 216, 249 },
		{ 162, 118, 152, 209, 142, 253, 216, 249 },
		{ 163, 119, 153, 210, 143, 253, 217, 249 },
		{ 164, 119, 153, 211, 143, 253, 217, 249 },
		{ 166, 120, 153, 212, 144, 254, 218, 250 },
		{ 167, 120, 153, 212, 145, 254, 219, 250 },
		{ 168, 121, 154, 213, 146, 254, 220, 250 },
		{ 169, 121, 154, 214, 146, 254, 220, 250 },
		{ 171, 122, 155, 215, 147, 254, 221, 250 },
		{ 172, 122, 155, 216, 147, 254, 221, 250 },
		{ 173, 123, 155, 217, 148, 254, 222, 250 },
		{ 174, 123, 155, 217, 149, 254, 222, 250 },
		{ 176, 124, 156, 218, 150, 254, 223, 250 },
		{ 177, 124, 156, 219, 150, 254, 223, 250 },
		{ 178, 125, 157, 220, 151, 254, 224, 251 },
		{ 179, 125, 157, 220, 151, 254, 224, 251 },
		{ 180, 126, 157, 221, 152, 254, 225, 251 },
		{ 181, 126, 157, 221, 152, 254, 225, 251 },
		{ 183, 127, 158, 222, 153, 254, 226, 251 },
		{ 184, 127, 158, 223, 154, 254, 226, 251 },
		{ 185, 128, 159, 224, 155, 255, 227, 251 },
		{ 186, 128, 159, 224, 155, 255, 227, 251 },
		{ 187, 129, 160, 225, 156, 255, 228, 251 },
		{ 188, 130, 160, 225, 156, 255, 228, 251 },
		{ 189, 131, 160, 226, 157, 255, 228, 251 },
		{ 190, 131, 160, 226, 158, 255, 228, 251 },
		{ 191, 132, 161, 227, 159, 255, 229, 251 },
		{ 192, 132, 161, 227, 159, 255, 229, 251 },
		{ 193, 133, 162, 228, 160, 255, 230, 252 },
		{ 194, 133, 162, 229, 160, 255, 230, 252 },
		{ 195, 134, 163, 230, 161, 255, 231, 252 },
		{ 196, 134, 163, 230, 161, 255, 231, 252 },
		{ 197, 135, 163, 231, 162, 255, 231, 252 },
		{ 198, 135, 163, 231, 162, 255, 231, 252 },
		{ 199, 136, 164, 232, 163, 255, 232, 252 },
		{ 200, 136, 164, 232, 164, 255, 232, 252 },
		{ 201, 137, 165, 233, 165, 255, 233, 252 },
		{ 201, 137, 165, 233, 165, 255, 233, 252 },
		{ 202, 138, 166, 233, 166, 255, 233, 252 },
		{ 203, 138, 166, 233, 166, 255, 233, 252 },
		{ 204, 139, 166, 234, 167, 255, 234, 252 },
		{ 205, 139, 166, 234, 167, 255, 234, 252 },
		{ 206, 140, 167, 235, 168, 255, 235, 252 },
		{ 206, 140, 167, 235, 168, 255, 235, 252 },
		{ 207, 141, 168, 236, 169, 255, 235, 252 },
		{ 208, 141, 168, 236, 170, 255, 235, 252 },
		{ 209, 142, 169, 237, 171, 255, 236, 252 },
		{ 209, 143, 169, 237, 171, 255, 236, 252 },
		{ 210, 144, 169, 237, 172, 255, 236, 252 },
		{ 211, 144, 169, 237, 172, 255, 236, 252 },
		{ 212, 145, 170, 238, 173, 255, 237, 252 },
		{ 213, 145, 170, 238, 173, 255, 237, 252 },
		{ 214, 146, 171, 239, 174, 255, 237, 253 },
		{ 214, 146, 171, 239, 174, 255, 237, 253 },
		{ 215, 147, 172, 240, 175, 255, 238, 253 },
		{ 215, 147, 172, 240, 175, 255, 238, 253 },
		{ 216, 148, 173, 240, 176, 255, 238, 253 },
		{ 217, 148, 173, 240, 176, 255, 238, 253 },
		{ 218, 149, 173, 241, 177, 255, 239, 253 },
		{ 218, 149, 173, 241, 178, 255, 239, 253 },
		{ 219, 150, 174, 241, 179, 255, 239, 253 },
		{ 219, 151, 174, 241, 179, 255, 239, 253 },
		{ 220, 152, 175, 242, 180, 255, 240, 253 },
		{ 221, 152, 175, 242, 180, 255, 240, 253 },
		{ 222, 153, 176, 242, 181, 255, 240, 253 },
		{ 222, 153, 176, 242, 181, 255, 240, 253 },
		{ 223, 154, 177, 243, 182, 255, 240, 253 },
		{ 223, 154, 177, 243, 182, 255, 240, 253 },
		{ 224, 155, 178, 244, 183, 255, 241, 253 },
		{ 224, 155, 178, 244, 183, 255, 241, 253 },
		{ 225, 156, 178, 244, 184, 255, 241, 253 },
		{ 225, 157, 178, 244, 184, 255, 241, 253 },
		{ 226, 158, 179, 244, 185, 255, 242, 253 },
		{ 227, 158, 179, 244, 185, 255, 242, 253 },
		{ 228, 159, 180, 245, 186, 255, 242, 253 },
		{ 228, 159, 180, 245, 186, 255, 242, 253 },
		{ 229, 160, 181, 245, 187, 255, 242, 253 },
		{ 229, 160, 181, 245, 187, 255, 242, 253 },
		{ 230, 161, 182, 246, 188, 255, 243, 253 },
		{ 230, 162, 182, 246, 188, 255, 243, 253 },
		{ 231, 163, 183, 246, 189, 255, 243, 253 },
		{ 231, 163, 183, 246, 189, 255, 243, 253 },
		{ 232, 164, 184, 247, 190, 255, 243, 253 },
		{ 232, 164, 184, 247, 190, 255, 243, 253 },
		{ 233, 165, 185, 247, 191, 255, 244, 253 },
		{ 233, 165, 185, 247, 191, 255, 244, 253 },
		{ 234, 166, 185, 247, 192, 255, 244, 253 },
		{ 234, 167, 185, 247, 192, 255, 244, 253 },
		{ 235, 168, 186, 248, 193, 255, 244, 253 },
		{ 235, 168, 186, 248, 193, 255, 244, 253 },
		{ 236, 169, 187, 248, 194, 255, 244, 253 },
		{ 236, 169, 187, 248, 194, 255, 244, 253 },
		{ 236, 170, 188, 248, 195, 255, 245, 253 },
		{ 236, 170, 188, 248, 195, 255, 245, 253 },
		{ 237, 171, 189, 249, 196, 255, 245, 254 },
		{ 237, 172, 189, 249, 196, 255, 245, 254 },
		{ 238, 173, 190, 249, 197, 255, 245, 254 },
		{ 238, 173, 190, 249, 197, 255, 245, 254 },
		{ 239, 174, 191, 249, 198, 255, 245, 254 },
		{ 239, 174, 191, 249, 198, 255, 245, 254 },
		{ 240, 175, 192, 249, 199, 255, 246, 254 },
		{ 240, 176, 192, 249, 199, 255, 246, 254 },
		{ 240, 177, 193, 250, 200, 255, 246, 254 },
		{ 240, 177, 193, 250, 200, 255, 246, 254 },
		{ 241, 178, 194, 250, 201, 255, 246, 254 },
		{ 241, 178, 194, 250, 201, 255, 246, 254 },
		{ 242, 179, 195, 250, 202, 255, 246, 254 },
		{ 242, 180, 195, 250, 202, 255, 246, 254 },
		{ 242, 181, 196, 250, 203, 255, 247, 254 },
		{ 242, 181, 196, 250, 203, 255, 247, 254 },
		{ 243, 182, 197, 251, 204, 255, 247, 254 },
		{ 243, 183, 197, 251, 204, 255, 247, 254 },
		{ 244, 184, 198, 251, 205, 255, 247, 254 },
		{ 244, 184, 198, 251, 205, 255, 247, 254 },
		{ 244, 185, 199, 251, 206, 255, 247, 254 },
		{ 244, 185, 199, 251, 206, 255, 247, 254 },
		{ 245, 186, 200, 251, 207, 255, 247, 254 },
		{ 245, 187, 200, 251, 207, 255, 247, 254 },
		{ 246, 188, 201, 252, 207, 255, 248, 254 },
		{ 246, 188, 201, 252, 207, 255, 248, 254 },
		{ 246, 189, 202, 252, 208, 255, 248, 254 },
		{ 246, 190, 202, 252, 208, 255, 248, 254 },
		{ 247, 191, 203, 252, 209, 255, 248, 254 },
		{ 247, 191, 203, 252, 209, 255, 248, 254 },
		{ 247, 192, 204, 252, 210, 255, 248, 254 },
		{ 247, 193, 204, 252, 210, 255, 248, 254 },
		{ 248, 194, 205, 252, 211, 255, 248, 254 },
		{ 248, 194, 205, 252, 211, 255, 248, 254 },
		{ 248, 195, 206, 252, 212, 255, 249, 254 },
		{ 248, 196, 206, 252, 212, 255, 249, 254 },
		{ 249, 197, 207, 253, 213, 255, 249, 254 },
		{ 249, 197, 207, 253, 213, 255, 249, 254 },
		{ 249, 198, 208, 253, 214, 255, 249, 254 },
		{ 249, 199, 209, 253, 214, 255, 249, 254 },
		{ 250, 200, 210, 253, 215, 255, 249, 254 },
		{ 250, 200, 210, 253, 215, 255, 249, 254 },
		{ 250, 201, 211, 253, 215, 255, 249, 254 },
		{ 250, 202, 211, 253, 215, 255, 249, 254 },
		{ 250, 203, 212, 253, 216, 255, 249, 254 },
		{ 250, 203, 212, 253, 216, 255, 249, 254 },
		{ 251, 204, 213, 253, 217, 255, 250, 254 },
		{ 251, 205, 213, 253, 217, 255, 250, 254 },
		{ 251, 206, 214, 254, 218, 255, 250, 254 },
		{ 251, 206, 215, 254, 218, 255, 250, 254 },
		{ 252, 207, 216, 254, 219, 255, 250, 254 },
		{ 252, 208, 216, 254, 219, 255, 250, 254 },
		{ 252, 209, 217, 254, 220, 255, 250, 254 },
		{ 252, 210, 217, 254, 220, 255, 250, 254 },
		{ 252, 211, 218, 254, 221, 255, 250, 254 },
		{ 252, 212, 218, 254, 221, 255, 250, 254 },
		{ 253, 213, 219, 254, 222, 255, 250, 254 },
		{ 253, 213, 220, 254, 222, 255, 250, 254 },
		{ 253, 214, 221, 254, 223, 255, 250, 254 },
		{ 253, 215, 221, 254, 223, 255, 250, 254 },
		{ 253, 216, 222, 254, 224, 255, 251, 254 },
		{ 253, 217, 223, 254, 224, 255, 251, 254 },
		{ 253, 218, 224, 254, 225, 255, 251, 254 },
		{ 253, 219, 224, 254, 225, 255, 251, 254 },
		{ 254, 220, 225, 254, 225, 255, 251, 254 },
		{ 254, 221, 226, 254, 225, 255, 251, 254 },
		{ 254, 222, 227, 255, 226, 255, 251, 254 },
		{ 254, 223, 227, 255, 226, 255, 251, 254 },
		{ 254, 224, 228, 255, 227, 255, 251, 254 },
		{ 254, 225, 229, 255, 227, 255, 251, 254 },
		{ 254, 226, 230, 255, 228, 255, 251, 254 },
		{ 254, 227, 230, 255, 229, 255, 251, 254 },
		{ 255, 228, 231, 255, 230, 255, 251, 254 },
		{ 255, 229, 232, 255, 230, 255, 251, 254 },
		{ 255, 230, 233, 255, 231, 255, 252, 254 },
		{ 255, 231, 234, 255, 231, 255, 252, 254 },
		{ 255, 232, 235, 255, 232, 255, 252, 254 },
		{ 255, 233, 236, 255, 232, 255, 252, 254 },
		{ 255, 235, 237, 255, 233, 255, 252, 254 },
		{ 255, 236, 238, 255, 234, 255, 252, 254 },
		{ 255, 238, 240, 255, 235, 255, 252, 255 },
		{ 255, 239, 241, 255, 235, 255, 252, 254 },
		{ 255, 241, 243, 255, 236, 255, 252, 254 },
		{ 255, 243, 245, 255, 237, 255, 252, 254 },
		{ 255, 246, 247, 255, 239, 255, 253, 255 },
		{ 255, 246, 247, 255, 239, 255, 253, 255 },
	},
	arrB[256][8] = {
		{ 3, 86, 128, 6, 86, 23, 88, 29 },
		{ 6, 86, 128, 11, 87, 42, 91, 52 },
		{ 9, 86, 129, 17, 88, 61, 94, 76 },
		{ 12, 86, 129, 22, 88, 77, 97, 93 },
		{ 15, 87, 129, 28, 89, 93, 100, 110 },
		{ 17, 87, 129, 33, 90, 105, 103, 123 },
		{ 20, 88, 130, 38, 91, 118, 106, 136 },
		{ 23, 88, 130, 43, 91, 128, 108, 146 },
		{ 26, 89, 131, 48, 92, 139, 111, 156 },
		{ 28, 89, 131, 53, 93, 147, 114, 163 },
		{ 31, 90, 131, 58, 94, 156, 117, 171 },
		{ 34, 90, 131, 62, 94, 163, 119, 177 },
		{ 37, 90, 132, 66, 95, 171, 122, 184 },
		{ 39, 90, 132, 70, 96, 177, 124, 189 },
		{ 42, 91, 132, 75, 97, 183, 127, 194 },
		{ 44, 91, 132, 79, 97, 188, 129, 198 },
		{ 47, 92, 133, 83, 98, 193, 132, 202 },
		{ 49, 92, 133, 86, 99, 197, 134, 205 },
		{ 52, 93, 133, 90, 100, 201, 137, 208 },
		{ 54, 93, 133, 94, 100, 204, 139, 211 },
		{ 57, 94, 134, 98, 101, 208, 142, 214 },
		{ 59, 94, 134, 101, 102, 211, 144, 216 },
		{ 62, 94, 135, 105, 103, 214, 146, 218 },
		{ 64, 94, 135, 108, 103, 216, 148, 220 },
		{ 66, 95, 135, 111, 104, 219, 151, 222 },
		{ 68, 95, 135, 114, 105, 221, 153, 223 },
		{ 71, 96, 136, 117, 106, 224, 155, 225 },
		{ 73, 96, 136, 120, 106, 225, 157, 226 },
		{ 76, 97, 136, 123, 107, 227, 159, 228 },
		{ 78, 97, 136, 126, 108, 229, 160, 229 },
		{ 80, 98, 137, 129, 109, 231, 162, 231 },
		{ 82, 98, 137, 131, 109, 232, 164, 232 },
		{ 84, 98, 138, 134, 110, 234, 166, 233 },
		{ 86, 98, 138, 137, 111, 235, 168, 234 },
		{ 89, 99, 138, 140, 112, 236, 170, 235 },
		{ 91, 99, 138, 142, 112, 237, 171, 235 },
		{ 93, 100, 139, 145, 113, 238, 173, 236 },
		{ 95, 100, 139, 147, 114, 239, 174, 237 },
		{ 97, 101, 140, 149, 115, 240, 176, 238 },
		{ 99, 101, 140, 151, 115, 241, 177, 238 },
		{ 101, 102, 140, 154, 116, 242, 179, 239 },
		{ 103, 102, 140, 156, 117, 242, 180, 239 },
		{ 105, 103, 141, 158, 118, 243, 182, 240 },
		{ 107, 103, 141, 160, 118, 243, 183, 240 },
		{ 109, 104, 141, 162, 119, 244, 185, 241 },
		{ 111, 104, 141, 164, 119, 244, 186, 241 },
		{ 113, 104, 142, 166, 120, 245, 187, 242 },
		{ 114, 104, 142, 168, 121, 245, 188, 242 },
		{ 116, 105, 143, 170, 122, 246, 190, 243 },
		{ 118, 105, 143, 171, 122, 246, 191, 243 },
		{ 120, 106, 143, 173, 123, 247, 192, 244 },
		{ 121, 106, 143, 175, 124, 247, 193, 244 },
		{ 123, 107, 144, 177, 125, 248, 195, 244 },
		{ 125, 107, 144, 178, 125, 248, 196, 244 },
		{ 127, 108, 145, 180, 126, 249, 197, 245 },
		{ 128, 108, 145, 181, 127, 249, 198, 245 },
		{ 130, 109, 145, 183, 128, 249, 199, 245 },
		{ 132, 109, 145, 184, 128, 249, 200, 245 },
		{ 134, 110, 146, 186, 129, 250, 201, 246 },
		{ 135, 110, 146, 187, 130, 250, 202, 246 },
		{ 137, 111, 147, 189, 131, 251, 203, 246 },
		{ 138, 111, 147, 190, 131, 251, 204, 246 },
		{ 140, 112, 147, 192, 132, 251, 205, 247 },
		{ 141, 112, 147, 193, 132, 251, 206, 247 },
		{ 143, 113, 148, 194, 133, 251, 207, 247 },
		{ 144, 113, 148, 195, 134, 251, 207, 247 },
		{ 146, 114, 149, 197, 135, 252, 208, 248 },
		{ 147, 114, 149, 198, 135, 252, 209, 248 },
		{ 149, 115, 149, 199, 136, 252, 210, 248 },
		{ 150, 115, 149, 200, 137, 252, 210, 248 },
		{ 152, 115, 150, 201, 138, 252, 211, 248 },
		{ 153, 115, 150, 202, 138, 252, 212, 248 },
		{ 155, 116, 151, 204, 139, 253, 213, 249 },
		{ 156, 116, 151, 205, 139, 253, 213, 249 },
		{ 158, 117, 151, 206, 140, 253, 214, 249 },
		{ 159, 117, 151, 207, 141, 253, 215, 249 },
		{ 161, 118, 152, 208, 142, 253, 216, 249 },
		{ 162, 118, 152, 209, 142, 253, 216, 249 },
		{ 163, 119, 153, 210, 143, 253, 217, 249 },
		{ 164, 119, 153, 211, 143, 253, 217, 249 },
		{ 166, 120, 153, 212, 144, 254, 218, 250 },
		{ 167, 120, 153, 212, 145, 254, 219, 250 },
		{ 168, 121, 154, 213, 146, 254, 220, 250 },
		{ 169, 121, 154, 214, 146, 254, 220, 250 },
		{ 171, 122, 155, 215, 147, 254, 221, 250 },
		{ 172, 122, 155, 216, 147, 254, 221, 250 },
		{ 173, 123, 155, 217, 148, 254, 222, 250 },
		{ 174, 123, 155, 217, 149, 254, 222, 250 },
		{ 176, 124, 156, 218, 150, 254, 223, 250 },
		{ 177, 124, 156, 219, 150, 254, 223, 250 },
		{ 178, 125, 157, 220, 151, 254, 224, 251 },
		{ 179, 125, 157, 220, 151, 254, 224, 251 },
		{ 180, 126, 157, 221, 152, 254, 225, 251 },
		{ 181, 126, 157, 221, 152, 254, 225, 251 },
		{ 183, 127, 158, 222, 153, 254, 226, 251 },
		{ 184, 127, 158, 223, 154, 254, 226, 251 },
		{ 185, 128, 159, 224, 155, 255, 227, 251 },
		{ 186, 128, 159, 224, 155, 255, 227, 251 },
		{ 187, 129, 160, 225, 156, 255, 228, 251 },
		{ 188, 130, 160, 225, 156, 255, 228, 251 },
		{ 189, 131, 160, 226, 157, 255, 228, 251 },
		{ 190, 131, 160, 226, 158, 255, 228, 251 },
		{ 191, 132, 161, 227, 159, 255, 229, 251 },
		{ 192, 132, 161, 227, 159, 255, 229, 251 },
		{ 193, 133, 162, 228, 160, 255, 230, 252 },
		{ 194, 133, 162, 229, 160, 255, 230, 252 },
		{ 195, 134, 163, 230, 161, 255, 231, 252 },
		{ 196, 134, 163, 230, 161, 255, 231, 252 },
		{ 197, 135, 163, 231, 162, 255, 231, 252 },
		{ 198, 135, 163, 231, 162, 255, 231, 252 },
		{ 199, 136, 164, 232, 163, 255, 232, 252 },
		{ 200, 136, 164, 232, 164, 255, 232, 252 },
		{ 201, 137, 165, 233, 165, 255, 233, 252 },
		{ 201, 137, 165, 233, 165, 255, 233, 252 },
		{ 202, 138, 166, 233, 166, 255, 233, 252 },
		{ 203, 138, 166, 233, 166, 255, 233, 252 },
		{ 204, 139, 166, 234, 167, 255, 234, 252 },
		{ 205, 139, 166, 234, 167, 255, 234, 252 },
		{ 206, 140, 167, 235, 168, 255, 235, 252 },
		{ 206, 140, 167, 235, 168, 255, 235, 252 },
		{ 207, 141, 168, 236, 169, 255, 235, 252 },
		{ 208, 141, 168, 236, 170, 255, 235, 252 },
		{ 209, 142, 169, 237, 171, 255, 236, 252 },
		{ 209, 143, 169, 237, 171, 255, 236, 252 },
		{ 210, 144, 169, 237, 172, 255, 236, 252 },
		{ 211, 144, 169, 237, 172, 255, 236, 252 },
		{ 212, 145, 170, 238, 173, 255, 237, 252 },
		{ 213, 145, 170, 238, 173, 255, 237, 252 },
		{ 214, 146, 171, 239, 174, 255, 237, 253 },
		{ 214, 146, 171, 239, 174, 255, 237, 253 },
		{ 215, 147, 172, 240, 175, 255, 238, 253 },
		{ 215, 147, 172, 240, 175, 255, 238, 253 },
		{ 216, 148, 173, 240, 176, 255, 238, 253 },
		{ 217, 148, 173, 240, 176, 255, 238, 253 },
		{ 218, 149, 173, 241, 177, 255, 239, 253 },
		{ 218, 149, 173, 241, 178, 255, 239, 253 },
		{ 219, 150, 174, 241, 179, 255, 239, 253 },
		{ 219, 151, 174, 241, 179, 255, 239, 253 },
		{ 220, 152, 175, 242, 180, 255, 240, 253 },
		{ 221, 152, 175, 242, 180, 255, 240, 253 },
		{ 222, 153, 176, 242, 181, 255, 240, 253 },
		{ 222, 153, 176, 242, 181, 255, 240, 253 },
		{ 223, 154, 177, 243, 182, 255, 240, 253 },
		{ 223, 154, 177, 243, 182, 255, 240, 253 },
		{ 224, 155, 178, 244, 183, 255, 241, 253 },
		{ 224, 155, 178, 244, 183, 255, 241, 253 },
		{ 225, 156, 178, 244, 184, 255, 241, 253 },
		{ 225, 157, 178, 244, 184, 255, 241, 253 },
		{ 226, 158, 179, 244, 185, 255, 242, 253 },
		{ 227, 158, 179, 244, 185, 255, 242, 253 },
		{ 228, 159, 180, 245, 186, 255, 242, 253 },
		{ 228, 159, 180, 245, 186, 255, 242, 253 },
		{ 229, 160, 181, 245, 187, 255, 242, 253 },
		{ 229, 160, 181, 245, 187, 255, 242, 253 },
		{ 230, 161, 182, 246, 188, 255, 243, 253 },
		{ 230, 162, 182, 246, 188, 255, 243, 253 },
		{ 231, 163, 183, 246, 189, 255, 243, 253 },
		{ 231, 163, 183, 246, 189, 255, 243, 253 },
		{ 232, 164, 184, 247, 190, 255, 243, 253 },
		{ 232, 164, 184, 247, 190, 255, 243, 253 },
		{ 233, 165, 185, 247, 191, 255, 244, 253 },
		{ 233, 165, 185, 247, 191, 255, 244, 253 },
		{ 234, 166, 185, 247, 192, 255, 244, 253 },
		{ 234, 167, 185, 247, 192, 255, 244, 253 },
		{ 235, 168, 186, 248, 193, 255, 244, 253 },
		{ 235, 168, 186, 248, 193, 255, 244, 253 },
		{ 236, 169, 187, 248, 194, 255, 244, 253 },
		{ 236, 169, 187, 248, 194, 255, 244, 253 },
		{ 236, 170, 188, 248, 195, 255, 245, 253 },
		{ 236, 170, 188, 248, 195, 255, 245, 253 },
		{ 237, 171, 189, 249, 196, 255, 245, 254 },
		{ 237, 172, 189, 249, 196, 255, 245, 254 },
		{ 238, 173, 190, 249, 197, 255, 245, 254 },
		{ 238, 173, 190, 249, 197, 255, 245, 254 },
		{ 239, 174, 191, 249, 198, 255, 245, 254 },
		{ 239, 174, 191, 249, 198, 255, 245, 254 },
		{ 240, 175, 192, 249, 199, 255, 246, 254 },
		{ 240, 176, 192, 249, 199, 255, 246, 254 },
		{ 240, 177, 193, 250, 200, 255, 246, 254 },
		{ 240, 177, 193, 250, 200, 255, 246, 254 },
		{ 241, 178, 194, 250, 201, 255, 246, 254 },
		{ 241, 178, 194, 250, 201, 255, 246, 254 },
		{ 242, 179, 195, 250, 202, 255, 246, 254 },
		{ 242, 180, 195, 250, 202, 255, 246, 254 },
		{ 242, 181, 196, 250, 203, 255, 247, 254 },
		{ 242, 181, 196, 250, 203, 255, 247, 254 },
		{ 243, 182, 197, 251, 204, 255, 247, 254 },
		{ 243, 183, 197, 251, 204, 255, 247, 254 },
		{ 244, 184, 198, 251, 205, 255, 247, 254 },
		{ 244, 184, 198, 251, 205, 255, 247, 254 },
		{ 244, 185, 199, 251, 206, 255, 247, 254 },
		{ 244, 185, 199, 251, 206, 255, 247, 254 },
		{ 245, 186, 200, 251, 207, 255, 247, 254 },
		{ 245, 187, 200, 251, 207, 255, 247, 254 },
		{ 246, 188, 201, 252, 207, 255, 248, 254 },
		{ 246, 188, 201, 252, 207, 255, 248, 254 },
		{ 246, 189, 202, 252, 208, 255, 248, 254 },
		{ 246, 190, 202, 252, 208, 255, 248, 254 },
		{ 247, 191, 203, 252, 209, 255, 248, 254 },
		{ 247, 191, 203, 252, 209, 255, 248, 254 },
		{ 247, 192, 204, 252, 210, 255, 248, 254 },
		{ 247, 193, 204, 252, 210, 255, 248, 254 },
		{ 248, 194, 205, 252, 211, 255, 248, 254 },
		{ 248, 194, 205, 252, 211, 255, 248, 254 },
		{ 248, 195, 206, 252, 212, 255, 249, 254 },
		{ 248, 196, 206, 252, 212, 255, 249, 254 },
		{ 249, 197, 207, 253, 213, 255, 249, 254 },
		{ 249, 197, 207, 253, 213, 255, 249, 254 },
		{ 249, 198, 208, 253, 214, 255, 249, 254 },
		{ 249, 199, 209, 253, 214, 255, 249, 254 },
		{ 250, 200, 210, 253, 215, 255, 249, 254 },
		{ 250, 200, 210, 253, 215, 255, 249, 254 },
		{ 250, 201, 211, 253, 215, 255, 249, 254 },
		{ 250, 202, 211, 253, 215, 255, 249, 254 },
		{ 250, 203, 212, 253, 216, 255, 249, 254 },
		{ 250, 203, 212, 253, 216, 255, 249, 254 },
		{ 251, 204, 213, 253, 217, 255, 250, 254 },
		{ 251, 205, 213, 253, 217, 255, 250, 254 },
		{ 251, 206, 214, 254, 218, 255, 250, 254 },
		{ 251, 206, 215, 254, 218, 255, 250, 254 },
		{ 252, 207, 216, 254, 219, 255, 250, 254 },
		{ 252, 208, 216, 254, 219, 255, 250, 254 },
		{ 252, 209, 217, 254, 220, 255, 250, 254 },
		{ 252, 210, 217, 254, 220, 255, 250, 254 },
		{ 252, 211, 218, 254, 221, 255, 250, 254 },
		{ 252, 212, 218, 254, 221, 255, 250, 254 },
		{ 253, 213, 219, 254, 222, 255, 250, 254 },
		{ 253, 213, 220, 254, 222, 255, 250, 254 },
		{ 253, 214, 221, 254, 223, 255, 250, 254 },
		{ 253, 215, 221, 254, 223, 255, 250, 254 },
		{ 253, 216, 222, 254, 224, 255, 251, 254 },
		{ 253, 217, 223, 254, 224, 255, 251, 254 },
		{ 253, 218, 224, 254, 225, 255, 251, 254 },
		{ 253, 219, 224, 254, 225, 255, 251, 254 },
		{ 254, 220, 225, 254, 225, 255, 251, 254 },
		{ 254, 221, 226, 254, 225, 255, 251, 254 },
		{ 254, 222, 227, 255, 226, 255, 251, 254 },
		{ 254, 223, 227, 255, 226, 255, 251, 254 },
		{ 254, 224, 228, 255, 227, 255, 251, 254 },
		{ 254, 225, 229, 255, 227, 255, 251, 254 },
		{ 254, 226, 230, 255, 228, 255, 251, 254 },
		{ 254, 227, 230, 255, 229, 255, 251, 254 },
		{ 255, 228, 231, 255, 230, 255, 251, 254 },
		{ 255, 229, 232, 255, 230, 255, 251, 254 },
		{ 255, 230, 233, 255, 231, 255, 252, 254 },
		{ 255, 231, 234, 255, 231, 255, 252, 254 },
		{ 255, 232, 235, 255, 232, 255, 252, 254 },
		{ 255, 233, 236, 255, 232, 255, 252, 254 },
		{ 255, 235, 237, 255, 233, 255, 252, 254 },
		{ 255, 236, 238, 255, 234, 255, 252, 254 },
		{ 255, 238, 240, 255, 235, 255, 252, 255 },
		{ 255, 239, 241, 255, 235, 255, 252, 254 },
		{ 255, 241, 243, 255, 236, 255, 252, 254 },
		{ 255, 243, 245, 255, 237, 255, 252, 254 },
		{ 255, 246, 247, 255, 239, 255, 253, 255 },
		{ 255, 246, 247, 255, 239, 255, 253, 255 },
	};
	printf("different elements between arrA and arrB: \n");
	for (i = 0; i < 256; i++)
		for (j = 0; j < 8; j++) {
			if (arrA[i][j] != arrB[i][j])
				printf("arrA[%d][%d]: %d; arrB[%d][%d]； %d\n", i, j, arrA[i][j], i, j, arrB[i][j]);
		}*/
    #pragma endregion

    return 0;
}